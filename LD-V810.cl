(setq *ld-name* "ld-v810")
(setq *ld-version* "1.00")
(setq *ld-not-recognized-keywords* '(here near far))
(setq *ld-signed-types* '(char short int long))
(setq *ld-unsigned-types* '(uchar ushort uint ulong))
(setq *ld-floating-types* '(float))
(setq *ld-address-types* '(address))
(setq *ld-atomic-type-syntax* '((char (char) (signed char))
                                (short (short) (signed short) (short int) (signed short int))
                                (int (int) (signed) (signed int))
                                (long (long) (signed long) (long int) (signed long int))
                                (uchar (unsigned char))
                                (ushort (unsigned short) (unsigned short int))
                                (uint (unsigned int) (unsigned))
                                (ulong (unsigned long) (unsigned long int))
                                (int nil)
                                (float (float) (double))))
(setq *ld-debugger-atomic-types* '(char short int long uchar ushort uint ulong float void))
(setq *ld-address-incompatible-alist* nil)
(setq *ld-address-incompatible-text-and-data* nil)
(setq *ld-atag-list* nil)
(setq *ld-global-variable-type-aqual* nil)
(setq *ld-local-variable-type-aqual* nil)
(setq *ld-default-function-pointer-type* 'address)
(setq *ld-default-data-pointer-type* 'address)
(setq *ld-hardware-types* '((char 1 1 i1)
                           (short 2 2 i2)
                           (int 4 4 i4)
                           (long 4 4 i4)
                           (uchar 1 1 i1)
                           (ushort 2 2 i2)
                           (uint 4 4 i4)
                           (ulong 4 4 i4)
                           (float 4 4 f4)
                           (address 4 4 i4)))
(setq *ld-explicit-struct-align* 4)
(setq *ld-byte-order* 'vax)
(setq *ld-function-align* 2)
(setq *ld-bool-type* 'int)
(setq *ld-enum-type* 'int)
(setq *ld-sizeof-type* 'uint)
(setq *ld-switch-type* 'int)
(setq *ld-shift-width-type* 'uint)
(setq *ld-string-element-type* 'char)
(setq *ld-string-segment-name* "const")
(setq *ld-string-address-type* 'address)
(setq *ld-string-uniquize* t)
(setq *ld-arith-types* '((char int) (uchar int) (short int) (ushort int) (int int)
                         (uint uint) (long long) (ulong ulong) (float float)))
(setq *ld-noproto-param-types* '((char int) (uchar int) (short int) (ushort int)))
(setq *ld-default-param-type* 'int)
(setq *ld-offset-types* '((address uint)))
(setq *ld-signed-bitfield-type* 'int *ld-unsigned-bitfield-type 'uint)
(setq *ld-default-text-segment-name* "text")
(setq *ld-default-data-segment-name* "data")
(setq *ld-default-bss-segment-name* "bss")
(setq *ld-default-const-segment-name* "const")
(setq *ld-enable-nested-comment* nil)
(setq *ld-sjis-string-p* nil)
(setq *ld-inumber-types* #(int char short nil long nil nil nil uint uchar ushort nil ulong nil nil nil int))
(setq *ld-fnumber-types* #(float float float))
(setq *ld-separate-tagnamespace* t)
(setq *ld-pedantic-enum* t)
(setq *ld-error-limit* 30)
(setq *ld-warning-empty-type-specifier* t)
(setq *ld-warning-empty-type-specifier-for-function* nil)
(setq *ld-warning-unused* nil)
(setq *ld-warning-noeffect-expression* nil)
(setq *ld-warning-unsigned-cmp-with-zero* nil)
(setq *ld-warning-implicit-function-declaration* nil)
(setq *ld-warning-sizeof-void* t)
(setq *ld-warning-sizeof-function* t)
(setq *ld-warning-nonvoid-function-returns-novalue* nil)
(setq *ld-extern-is-always-global* t)

(defun pragma (args)
  (format t "#pragma")
  (mapcar '(lambda (x)
             (format t " %T" (cond
                              ((eq (car x) 'ident) (ident-name (cdr x)))
                              ((not (cdr x)) (get (car x) 'tkimage))
                              ((eq (car x) 'string) (format nil "%t" (cdr x)))
                              (t (cdr x)))))
          args)
  (format t "\n"))

(defun ld-check-expr-hook (expr)
  (case (expr-car expr)
    ((tstlt tstle tstgt tstge)
     (let ((x (car (expr-args expr)))
           (y (cadr (expr-args expr))))
       (when (or (eq (expr-car x) 'convzx) (eq (expr-car y) 'convzx))
         (let ((spos (or (expr-spos expr) (get-spos))))
           (format t "%s %d: warning: It may be ANSI Incompatible compare.\n" (car spos) (cdr spos))))))))

(defun Wnec nil
  (setq *ld-check-expr-hook* 'ld-check-expr-hook))

(defun @-error (fmt &rest args)
  (apply 'cperror (format nil "in @-construct: %s" fmt) args)
  (throw 'clerror-catch-tag t))

(defun ref-ident (name)
  (when (symbol-p name)
    (setq name (symbol-name name)))
  (unless (string-p name)
    (@-error "%t is an illegal argument to ref-ident" name))
  (let ((ident (search-ident name)))
    (unless ident
      (@-error "%T is undefined here" name))
    ident))

(defun ident-put (name key value)
    (push (list key value) (ident-alist (ref-ident name))))

(defun inline-asm-func (name gen)
  (ident-put name 'inline-asm gen))

(defmacro inline-asm (name gen)
  (list 'inline-asm-func (list 'quote name) (list 'quote gen)))
